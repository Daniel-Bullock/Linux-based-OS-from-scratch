/* rtc.h - Defines used in interactions with the rtc */

#include "types.h"
#include "filedescriptor.h"

#define RTC_PORT    0x70
#define CMOS_PORT   0x71
#define RTC_IRQ     8
#define RTC_RATE    1024

/* Initializes RTC, turns on periodic interrupts, and enables
 * the associated IRQ on the PIC 
 *      INPUTS: none
 *      OUTPUTS: none
 *      RETURN VALUE: none
 *      SIDE EFFECTS: Sets interrupt flag, enables interrupts from the RTC,
 *                    and RTC will generate periodic interrupts at 2 Hz
 */
void rtc_init();


/* Handles interrupts generated by the RTC
 *  INPUTS: none
 *  OUTPUTS: none
 *  RETURN VALUE: none
 *  SIDE EFFECTS: Calls test_interrupts, which prints onto the screen
 */
void rtc_handler();


/* Initializes rtc frequency to 2 Hz
 *  INPUTS: none
 *  OUTPUTS: sets counter to 0, divider to RTC_RATE/2
 *  RETURN VALUE: none
 *  SIDE EFFECTS: none
 */
int32_t rtc_open(file_desc_t *fd, const uint8_t* filename);


/* Doesn't really do anything but still need to define
 *  INPUTS: none
 *  OUTPUTS: none
 *  RETURN VALUE: 0
 *  SIDE EFFECTS: none
 */
int32_t rtc_close(file_desc_t *fd);

/* Waits until interrupt has occurred
 *  INPUTS: defined but not used
 *  OUTPUTS: none
 *  RETURN VALUE: 0
 *  SIDE EFFECTS: none
 */
int32_t rtc_read(file_desc_t *fd, void* buf, int32_t nbytes);

/* Changes the rtc frequency
 *  INPUTS: int32_t fd - not used
 *          void* buf - buffer of data we want to write, must be power of 2
 *          int32_t nbytes - number of bytes in buf, must be 4
 *  OUTPUTS: none
 *  RETURN VALUE: -1 if unsuccessful, nbytes if success
 *  SIDE EFFECTS: changes rtc virtual frequency
 */
int32_t rtc_write(file_desc_t *fd, const void* buf, int32_t nbytes);
